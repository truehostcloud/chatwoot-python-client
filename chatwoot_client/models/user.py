# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'uid': 'str',
        'name': 'str',
        'available_name': 'str',
        'display_name': 'str',
        'email': 'str',
        'account_id': 'float',
        'role': 'str',
        'confirmed': 'bool',
        'custom_attributes': 'object',
        'accounts': 'list[Account]'
    }

    attribute_map = {
        'id': 'id',
        'uid': 'uid',
        'name': 'name',
        'available_name': 'available_name',
        'display_name': 'display_name',
        'email': 'email',
        'account_id': 'account_id',
        'role': 'role',
        'confirmed': 'confirmed',
        'custom_attributes': 'custom_attributes',
        'accounts': 'accounts'
    }

    def __init__(self, id=None, uid=None, name=None, available_name=None, display_name=None, email=None, account_id=None, role=None, confirmed=None, custom_attributes=None, accounts=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uid = None
        self._name = None
        self._available_name = None
        self._display_name = None
        self._email = None
        self._account_id = None
        self._role = None
        self._confirmed = None
        self._custom_attributes = None
        self._accounts = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if uid is not None:
            self.uid = uid
        if name is not None:
            self.name = name
        if available_name is not None:
            self.available_name = available_name
        if display_name is not None:
            self.display_name = display_name
        if email is not None:
            self.email = email
        if account_id is not None:
            self.account_id = account_id
        if role is not None:
            self.role = role
        if confirmed is not None:
            self.confirmed = confirmed
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if accounts is not None:
            self.accounts = accounts

    @property
    def id(self):
        """Gets the id of this User.  # noqa: E501


        :return: The id of this User.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def uid(self):
        """Gets the uid of this User.  # noqa: E501


        :return: The uid of this User.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this User.


        :param uid: The uid of this User.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def name(self):
        """Gets the name of this User.  # noqa: E501


        :return: The name of this User.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def available_name(self):
        """Gets the available_name of this User.  # noqa: E501


        :return: The available_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._available_name

    @available_name.setter
    def available_name(self, available_name):
        """Sets the available_name of this User.


        :param available_name: The available_name of this User.  # noqa: E501
        :type: str
        """

        self._available_name = available_name

    @property
    def display_name(self):
        """Gets the display_name of this User.  # noqa: E501


        :return: The display_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.


        :param display_name: The display_name of this User.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """Gets the email of this User.  # noqa: E501


        :return: The email of this User.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def account_id(self):
        """Gets the account_id of this User.  # noqa: E501


        :return: The account_id of this User.  # noqa: E501
        :rtype: float
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this User.


        :param account_id: The account_id of this User.  # noqa: E501
        :type: float
        """

        self._account_id = account_id

    @property
    def role(self):
        """Gets the role of this User.  # noqa: E501


        :return: The role of this User.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this User.


        :param role: The role of this User.  # noqa: E501
        :type: str
        """
        allowed_values = ["agent", "administrator"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def confirmed(self):
        """Gets the confirmed of this User.  # noqa: E501


        :return: The confirmed of this User.  # noqa: E501
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this User.


        :param confirmed: The confirmed of this User.  # noqa: E501
        :type: bool
        """

        self._confirmed = confirmed

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this User.  # noqa: E501

        Available for users who are created through platform APIs and has custom attributes associated.  # noqa: E501

        :return: The custom_attributes of this User.  # noqa: E501
        :rtype: object
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this User.

        Available for users who are created through platform APIs and has custom attributes associated.  # noqa: E501

        :param custom_attributes: The custom_attributes of this User.  # noqa: E501
        :type: object
        """

        self._custom_attributes = custom_attributes

    @property
    def accounts(self):
        """Gets the accounts of this User.  # noqa: E501


        :return: The accounts of this User.  # noqa: E501
        :rtype: list[Account]
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this User.


        :param accounts: The accounts of this User.  # noqa: E501
        :type: list[Account]
        """

        self._accounts = accounts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
