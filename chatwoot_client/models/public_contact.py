# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'source_id': 'str',
        'name': 'str',
        'email': 'str',
        'pubsub_token': 'str'
    }

    attribute_map = {
        'id': 'id',
        'source_id': 'source_id',
        'name': 'name',
        'email': 'email',
        'pubsub_token': 'pubsub_token'
    }

    def __init__(self, id=None, source_id=None, name=None, email=None, pubsub_token=None):  # noqa: E501
        """PublicContact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_id = None
        self._name = None
        self._email = None
        self._pubsub_token = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if source_id is not None:
            self.source_id = source_id
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if pubsub_token is not None:
            self.pubsub_token = pubsub_token

    @property
    def id(self):
        """Gets the id of this PublicContact.  # noqa: E501

        Id of the contact  # noqa: E501

        :return: The id of this PublicContact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicContact.

        Id of the contact  # noqa: E501

        :param id: The id of this PublicContact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source_id(self):
        """Gets the source_id of this PublicContact.  # noqa: E501

        The session identifier of the contact  # noqa: E501

        :return: The source_id of this PublicContact.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this PublicContact.

        The session identifier of the contact  # noqa: E501

        :param source_id: The source_id of this PublicContact.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def name(self):
        """Gets the name of this PublicContact.  # noqa: E501

        Name of the contact  # noqa: E501

        :return: The name of this PublicContact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicContact.

        Name of the contact  # noqa: E501

        :param name: The name of this PublicContact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this PublicContact.  # noqa: E501

        Email of the contact  # noqa: E501

        :return: The email of this PublicContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PublicContact.

        Email of the contact  # noqa: E501

        :param email: The email of this PublicContact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def pubsub_token(self):
        """Gets the pubsub_token of this PublicContact.  # noqa: E501

        The token to be used to connect to chatwoot websocket  # noqa: E501

        :return: The pubsub_token of this PublicContact.  # noqa: E501
        :rtype: str
        """
        return self._pubsub_token

    @pubsub_token.setter
    def pubsub_token(self, pubsub_token):
        """Sets the pubsub_token of this PublicContact.

        The token to be used to connect to chatwoot websocket  # noqa: E501

        :param pubsub_token: The pubsub_token of this PublicContact.  # noqa: E501
        :type: str
        """

        self._pubsub_token = pubsub_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
