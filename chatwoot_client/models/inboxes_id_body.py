# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InboxesIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'enable_auto_assignment': 'bool',
        'avatar': 'str',
        'channel': 'Apiv1accountsaccountIdinboxesidChannel'
    }

    attribute_map = {
        'name': 'name',
        'enable_auto_assignment': 'enable_auto_assignment',
        'avatar': 'avatar',
        'channel': 'channel'
    }

    def __init__(self, name=None, enable_auto_assignment=None, avatar=None, channel=None):  # noqa: E501
        """InboxesIdBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._enable_auto_assignment = None
        self._avatar = None
        self._channel = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.enable_auto_assignment = enable_auto_assignment
        if avatar is not None:
            self.avatar = avatar
        if channel is not None:
            self.channel = channel

    @property
    def name(self):
        """Gets the name of this InboxesIdBody.  # noqa: E501

        The name of the inbox  # noqa: E501

        :return: The name of this InboxesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InboxesIdBody.

        The name of the inbox  # noqa: E501

        :param name: The name of this InboxesIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def enable_auto_assignment(self):
        """Gets the enable_auto_assignment of this InboxesIdBody.  # noqa: E501

        Enable Auto Assignment  # noqa: E501

        :return: The enable_auto_assignment of this InboxesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._enable_auto_assignment

    @enable_auto_assignment.setter
    def enable_auto_assignment(self, enable_auto_assignment):
        """Sets the enable_auto_assignment of this InboxesIdBody.

        Enable Auto Assignment  # noqa: E501

        :param enable_auto_assignment: The enable_auto_assignment of this InboxesIdBody.  # noqa: E501
        :type: bool
        """
        if enable_auto_assignment is None:
            raise ValueError("Invalid value for `enable_auto_assignment`, must not be `None`")  # noqa: E501

        self._enable_auto_assignment = enable_auto_assignment

    @property
    def avatar(self):
        """Gets the avatar of this InboxesIdBody.  # noqa: E501

        Image file for avatar  # noqa: E501

        :return: The avatar of this InboxesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this InboxesIdBody.

        Image file for avatar  # noqa: E501

        :param avatar: The avatar of this InboxesIdBody.  # noqa: E501
        :type: str
        """

        self._avatar = avatar

    @property
    def channel(self):
        """Gets the channel of this InboxesIdBody.  # noqa: E501


        :return: The channel of this InboxesIdBody.  # noqa: E501
        :rtype: Apiv1accountsaccountIdinboxesidChannel
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this InboxesIdBody.


        :param channel: The channel of this InboxesIdBody.  # noqa: E501
        :type: Apiv1accountsaccountIdinboxesidChannel
        """

        self._channel = channel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InboxesIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InboxesIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
