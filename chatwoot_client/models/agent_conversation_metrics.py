# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AgentConversationMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'float',
        'name': 'str',
        'email': 'str',
        'thumbnail': 'str',
        'availability': 'str',
        'metric': 'AgentConversationMetricsMetric'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'email': 'email',
        'thumbnail': 'thumbnail',
        'availability': 'availability',
        'metric': 'metric'
    }

    def __init__(self, id=None, name=None, email=None, thumbnail=None, availability=None, metric=None):  # noqa: E501
        """AgentConversationMetrics - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._email = None
        self._thumbnail = None
        self._availability = None
        self._metric = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if availability is not None:
            self.availability = availability
        if metric is not None:
            self.metric = metric

    @property
    def id(self):
        """Gets the id of this AgentConversationMetrics.  # noqa: E501


        :return: The id of this AgentConversationMetrics.  # noqa: E501
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AgentConversationMetrics.


        :param id: The id of this AgentConversationMetrics.  # noqa: E501
        :type: float
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AgentConversationMetrics.  # noqa: E501


        :return: The name of this AgentConversationMetrics.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AgentConversationMetrics.


        :param name: The name of this AgentConversationMetrics.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this AgentConversationMetrics.  # noqa: E501


        :return: The email of this AgentConversationMetrics.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AgentConversationMetrics.


        :param email: The email of this AgentConversationMetrics.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def thumbnail(self):
        """Gets the thumbnail of this AgentConversationMetrics.  # noqa: E501


        :return: The thumbnail of this AgentConversationMetrics.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this AgentConversationMetrics.


        :param thumbnail: The thumbnail of this AgentConversationMetrics.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def availability(self):
        """Gets the availability of this AgentConversationMetrics.  # noqa: E501


        :return: The availability of this AgentConversationMetrics.  # noqa: E501
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability):
        """Sets the availability of this AgentConversationMetrics.


        :param availability: The availability of this AgentConversationMetrics.  # noqa: E501
        :type: str
        """

        self._availability = availability

    @property
    def metric(self):
        """Gets the metric of this AgentConversationMetrics.  # noqa: E501


        :return: The metric of this AgentConversationMetrics.  # noqa: E501
        :rtype: AgentConversationMetricsMetric
        """
        return self._metric

    @metric.setter
    def metric(self, metric):
        """Sets the metric of this AgentConversationMetrics.


        :param metric: The metric of this AgentConversationMetrics.  # noqa: E501
        :type: AgentConversationMetricsMetric
        """

        self._metric = metric

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AgentConversationMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AgentConversationMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
