# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountIdAgentsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'email': 'str',
        'role': 'str',
        'availability_status': 'str',
        'auto_offline': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'role': 'role',
        'availability_status': 'availability_status',
        'auto_offline': 'auto_offline'
    }

    def __init__(self, name=None, email=None, role=None, availability_status=None, auto_offline=None):  # noqa: E501
        """AccountIdAgentsBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._email = None
        self._role = None
        self._availability_status = None
        self._auto_offline = None
        self.discriminator = None
        self.name = name
        self.email = email
        self.role = role
        if availability_status is not None:
            self.availability_status = availability_status
        if auto_offline is not None:
            self.auto_offline = auto_offline

    @property
    def name(self):
        """Gets the name of this AccountIdAgentsBody.  # noqa: E501

        Full Name of the agent  # noqa: E501

        :return: The name of this AccountIdAgentsBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountIdAgentsBody.

        Full Name of the agent  # noqa: E501

        :param name: The name of this AccountIdAgentsBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def email(self):
        """Gets the email of this AccountIdAgentsBody.  # noqa: E501

        Email of the Agent  # noqa: E501

        :return: The email of this AccountIdAgentsBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AccountIdAgentsBody.

        Email of the Agent  # noqa: E501

        :param email: The email of this AccountIdAgentsBody.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def role(self):
        """Gets the role of this AccountIdAgentsBody.  # noqa: E501

        Whether its administrator or agent  # noqa: E501

        :return: The role of this AccountIdAgentsBody.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AccountIdAgentsBody.

        Whether its administrator or agent  # noqa: E501

        :param role: The role of this AccountIdAgentsBody.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["agent", "administrator"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def availability_status(self):
        """Gets the availability_status of this AccountIdAgentsBody.  # noqa: E501

        The availability setting of the agent.  # noqa: E501

        :return: The availability_status of this AccountIdAgentsBody.  # noqa: E501
        :rtype: str
        """
        return self._availability_status

    @availability_status.setter
    def availability_status(self, availability_status):
        """Sets the availability_status of this AccountIdAgentsBody.

        The availability setting of the agent.  # noqa: E501

        :param availability_status: The availability_status of this AccountIdAgentsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["available", "busy", "offline"]  # noqa: E501
        if availability_status not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_status` ({0}), must be one of {1}"  # noqa: E501
                .format(availability_status, allowed_values)
            )

        self._availability_status = availability_status

    @property
    def auto_offline(self):
        """Gets the auto_offline of this AccountIdAgentsBody.  # noqa: E501

        Whether the availability status of agent is configured to go offline automatically when away.  # noqa: E501

        :return: The auto_offline of this AccountIdAgentsBody.  # noqa: E501
        :rtype: bool
        """
        return self._auto_offline

    @auto_offline.setter
    def auto_offline(self, auto_offline):
        """Sets the auto_offline of this AccountIdAgentsBody.

        Whether the availability status of agent is configured to go offline automatically when away.  # noqa: E501

        :param auto_offline: The auto_offline of this AccountIdAgentsBody.  # noqa: E501
        :type: bool
        """

        self._auto_offline = auto_offline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountIdAgentsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountIdAgentsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
