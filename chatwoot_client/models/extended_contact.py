# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from chatwoot_client.models.contact import Contact  # noqa: F401,E501

class ExtendedContact(Contact):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'availability_status': 'str'
    }
    if hasattr(Contact, "swagger_types"):
        swagger_types.update(Contact.swagger_types)

    attribute_map = {
        'id': 'id',
        'availability_status': 'availability_status'
    }
    if hasattr(Contact, "attribute_map"):
        attribute_map.update(Contact.attribute_map)

    def __init__(self, id=None, availability_status=None, *args, **kwargs):  # noqa: E501
        """ExtendedContact - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._availability_status = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if availability_status is not None:
            self.availability_status = availability_status
        Contact.__init__(self, *args, **kwargs)

    @property
    def id(self):
        """Gets the id of this ExtendedContact.  # noqa: E501

        Id of the user  # noqa: E501

        :return: The id of this ExtendedContact.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtendedContact.

        Id of the user  # noqa: E501

        :param id: The id of this ExtendedContact.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def availability_status(self):
        """Gets the availability_status of this ExtendedContact.  # noqa: E501

        Availability status of the user  # noqa: E501

        :return: The availability_status of this ExtendedContact.  # noqa: E501
        :rtype: str
        """
        return self._availability_status

    @availability_status.setter
    def availability_status(self, availability_status):
        """Sets the availability_status of this ExtendedContact.

        Availability status of the user  # noqa: E501

        :param availability_status: The availability_status of this ExtendedContact.  # noqa: E501
        :type: str
        """
        allowed_values = ["online", "offline", "busy"]  # noqa: E501
        if availability_status not in allowed_values:
            raise ValueError(
                "Invalid value for `availability_status` ({0}), must be one of {1}"  # noqa: E501
                .format(availability_status, allowed_values)
            )

        self._availability_status = availability_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtendedContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtendedContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
