# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Apiv1accountsaccountIdconversationsfilterPayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_key': 'str',
        'filter_operator': 'str',
        'values': 'list[str]',
        'query_operator': 'str'
    }

    attribute_map = {
        'attribute_key': 'attribute_key',
        'filter_operator': 'filter_operator',
        'values': 'values',
        'query_operator': 'query_operator'
    }

    def __init__(self, attribute_key=None, filter_operator=None, values=None, query_operator=None):  # noqa: E501
        """Apiv1accountsaccountIdconversationsfilterPayload - a model defined in Swagger"""  # noqa: E501
        self._attribute_key = None
        self._filter_operator = None
        self._values = None
        self._query_operator = None
        self.discriminator = None
        if attribute_key is not None:
            self.attribute_key = attribute_key
        if filter_operator is not None:
            self.filter_operator = filter_operator
        if values is not None:
            self.values = values
        if query_operator is not None:
            self.query_operator = query_operator

    @property
    def attribute_key(self):
        """Gets the attribute_key of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501

        filter attribute name  # noqa: E501

        :return: The attribute_key of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :rtype: str
        """
        return self._attribute_key

    @attribute_key.setter
    def attribute_key(self, attribute_key):
        """Sets the attribute_key of this Apiv1accountsaccountIdconversationsfilterPayload.

        filter attribute name  # noqa: E501

        :param attribute_key: The attribute_key of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :type: str
        """

        self._attribute_key = attribute_key

    @property
    def filter_operator(self):
        """Gets the filter_operator of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501

        filter operator name  # noqa: E501

        :return: The filter_operator of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :rtype: str
        """
        return self._filter_operator

    @filter_operator.setter
    def filter_operator(self, filter_operator):
        """Sets the filter_operator of this Apiv1accountsaccountIdconversationsfilterPayload.

        filter operator name  # noqa: E501

        :param filter_operator: The filter_operator of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["equal_to", "not_equal_to", "contains", "does_not_contain"]  # noqa: E501
        if filter_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(filter_operator, allowed_values)
            )

        self._filter_operator = filter_operator

    @property
    def values(self):
        """Gets the values of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501

        array of the attribute values to filter  # noqa: E501

        :return: The values of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Apiv1accountsaccountIdconversationsfilterPayload.

        array of the attribute values to filter  # noqa: E501

        :param values: The values of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def query_operator(self):
        """Gets the query_operator of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501

        query operator name  # noqa: E501

        :return: The query_operator of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :rtype: str
        """
        return self._query_operator

    @query_operator.setter
    def query_operator(self, query_operator):
        """Sets the query_operator of this Apiv1accountsaccountIdconversationsfilterPayload.

        query operator name  # noqa: E501

        :param query_operator: The query_operator of this Apiv1accountsaccountIdconversationsfilterPayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["AND", "OR"]  # noqa: E501
        if query_operator not in allowed_values:
            raise ValueError(
                "Invalid value for `query_operator` ({0}), must be one of {1}"  # noqa: E501
                .format(query_operator, allowed_values)
            )

        self._query_operator = query_operator

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Apiv1accountsaccountIdconversationsfilterPayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Apiv1accountsaccountIdconversationsfilterPayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
