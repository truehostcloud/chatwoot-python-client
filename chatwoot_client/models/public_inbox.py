# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicInbox(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'name': 'str',
        'timezone': 'str',
        'working_hours': 'list[PublicInboxWorkingHours]',
        'working_hours_enabled': 'bool',
        'csat_survey_enabled': 'bool',
        'greeting_enabled': 'bool',
        'identity_validation_enabled': 'bool'
    }

    attribute_map = {
        'identifier': 'identifier',
        'name': 'name',
        'timezone': 'timezone',
        'working_hours': 'working_hours',
        'working_hours_enabled': 'working_hours_enabled',
        'csat_survey_enabled': 'csat_survey_enabled',
        'greeting_enabled': 'greeting_enabled',
        'identity_validation_enabled': 'identity_validation_enabled'
    }

    def __init__(self, identifier=None, name=None, timezone=None, working_hours=None, working_hours_enabled=None, csat_survey_enabled=None, greeting_enabled=None, identity_validation_enabled=None):  # noqa: E501
        """PublicInbox - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._name = None
        self._timezone = None
        self._working_hours = None
        self._working_hours_enabled = None
        self._csat_survey_enabled = None
        self._greeting_enabled = None
        self._identity_validation_enabled = None
        self.discriminator = None
        if identifier is not None:
            self.identifier = identifier
        if name is not None:
            self.name = name
        if timezone is not None:
            self.timezone = timezone
        if working_hours is not None:
            self.working_hours = working_hours
        if working_hours_enabled is not None:
            self.working_hours_enabled = working_hours_enabled
        if csat_survey_enabled is not None:
            self.csat_survey_enabled = csat_survey_enabled
        if greeting_enabled is not None:
            self.greeting_enabled = greeting_enabled
        if identity_validation_enabled is not None:
            self.identity_validation_enabled = identity_validation_enabled

    @property
    def identifier(self):
        """Gets the identifier of this PublicInbox.  # noqa: E501

        Inbox identifier  # noqa: E501

        :return: The identifier of this PublicInbox.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PublicInbox.

        Inbox identifier  # noqa: E501

        :param identifier: The identifier of this PublicInbox.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def name(self):
        """Gets the name of this PublicInbox.  # noqa: E501

        Name of the inbox  # noqa: E501

        :return: The name of this PublicInbox.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublicInbox.

        Name of the inbox  # noqa: E501

        :param name: The name of this PublicInbox.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def timezone(self):
        """Gets the timezone of this PublicInbox.  # noqa: E501

        The timezone defined on the inbox  # noqa: E501

        :return: The timezone of this PublicInbox.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this PublicInbox.

        The timezone defined on the inbox  # noqa: E501

        :param timezone: The timezone of this PublicInbox.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def working_hours(self):
        """Gets the working_hours of this PublicInbox.  # noqa: E501

        The working hours defined on the inbox  # noqa: E501

        :return: The working_hours of this PublicInbox.  # noqa: E501
        :rtype: list[PublicInboxWorkingHours]
        """
        return self._working_hours

    @working_hours.setter
    def working_hours(self, working_hours):
        """Sets the working_hours of this PublicInbox.

        The working hours defined on the inbox  # noqa: E501

        :param working_hours: The working_hours of this PublicInbox.  # noqa: E501
        :type: list[PublicInboxWorkingHours]
        """

        self._working_hours = working_hours

    @property
    def working_hours_enabled(self):
        """Gets the working_hours_enabled of this PublicInbox.  # noqa: E501

        Whether of not the working hours are enabled on the inbox  # noqa: E501

        :return: The working_hours_enabled of this PublicInbox.  # noqa: E501
        :rtype: bool
        """
        return self._working_hours_enabled

    @working_hours_enabled.setter
    def working_hours_enabled(self, working_hours_enabled):
        """Sets the working_hours_enabled of this PublicInbox.

        Whether of not the working hours are enabled on the inbox  # noqa: E501

        :param working_hours_enabled: The working_hours_enabled of this PublicInbox.  # noqa: E501
        :type: bool
        """

        self._working_hours_enabled = working_hours_enabled

    @property
    def csat_survey_enabled(self):
        """Gets the csat_survey_enabled of this PublicInbox.  # noqa: E501

        Whether of not the Customer Satisfaction survey is enabled on the inbox  # noqa: E501

        :return: The csat_survey_enabled of this PublicInbox.  # noqa: E501
        :rtype: bool
        """
        return self._csat_survey_enabled

    @csat_survey_enabled.setter
    def csat_survey_enabled(self, csat_survey_enabled):
        """Sets the csat_survey_enabled of this PublicInbox.

        Whether of not the Customer Satisfaction survey is enabled on the inbox  # noqa: E501

        :param csat_survey_enabled: The csat_survey_enabled of this PublicInbox.  # noqa: E501
        :type: bool
        """

        self._csat_survey_enabled = csat_survey_enabled

    @property
    def greeting_enabled(self):
        """Gets the greeting_enabled of this PublicInbox.  # noqa: E501

        Whether of not the Greeting Message is enabled on the inbox  # noqa: E501

        :return: The greeting_enabled of this PublicInbox.  # noqa: E501
        :rtype: bool
        """
        return self._greeting_enabled

    @greeting_enabled.setter
    def greeting_enabled(self, greeting_enabled):
        """Sets the greeting_enabled of this PublicInbox.

        Whether of not the Greeting Message is enabled on the inbox  # noqa: E501

        :param greeting_enabled: The greeting_enabled of this PublicInbox.  # noqa: E501
        :type: bool
        """

        self._greeting_enabled = greeting_enabled

    @property
    def identity_validation_enabled(self):
        """Gets the identity_validation_enabled of this PublicInbox.  # noqa: E501

        Whether of not the User Identity Validation is enforced on the inbox  # noqa: E501

        :return: The identity_validation_enabled of this PublicInbox.  # noqa: E501
        :rtype: bool
        """
        return self._identity_validation_enabled

    @identity_validation_enabled.setter
    def identity_validation_enabled(self, identity_validation_enabled):
        """Sets the identity_validation_enabled of this PublicInbox.

        Whether of not the User Identity Validation is enforced on the inbox  # noqa: E501

        :param identity_validation_enabled: The identity_validation_enabled of this PublicInbox.  # noqa: E501
        :type: bool
        """

        self._identity_validation_enabled = identity_validation_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicInbox, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicInbox):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
