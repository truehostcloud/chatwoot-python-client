# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicInboxWorkingHours(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'day_of_week': 'int',
        'open_all_day': 'bool',
        'closed_all_day': 'bool',
        'open_hour': 'int',
        'open_minutes': 'int',
        'close_hour': 'int',
        'close_minutes': 'int'
    }

    attribute_map = {
        'day_of_week': 'day_of_week',
        'open_all_day': 'open_all_day',
        'closed_all_day': 'closed_all_day',
        'open_hour': 'open_hour',
        'open_minutes': 'open_minutes',
        'close_hour': 'close_hour',
        'close_minutes': 'close_minutes'
    }

    def __init__(self, day_of_week=None, open_all_day=None, closed_all_day=None, open_hour=None, open_minutes=None, close_hour=None, close_minutes=None):  # noqa: E501
        """PublicInboxWorkingHours - a model defined in Swagger"""  # noqa: E501
        self._day_of_week = None
        self._open_all_day = None
        self._closed_all_day = None
        self._open_hour = None
        self._open_minutes = None
        self._close_hour = None
        self._close_minutes = None
        self.discriminator = None
        if day_of_week is not None:
            self.day_of_week = day_of_week
        if open_all_day is not None:
            self.open_all_day = open_all_day
        if closed_all_day is not None:
            self.closed_all_day = closed_all_day
        if open_hour is not None:
            self.open_hour = open_hour
        if open_minutes is not None:
            self.open_minutes = open_minutes
        if close_hour is not None:
            self.close_hour = close_hour
        if close_minutes is not None:
            self.close_minutes = close_minutes

    @property
    def day_of_week(self):
        """Gets the day_of_week of this PublicInboxWorkingHours.  # noqa: E501

        Day of the week as a number. Sunday -> 0, Saturday -> 6  # noqa: E501

        :return: The day_of_week of this PublicInboxWorkingHours.  # noqa: E501
        :rtype: int
        """
        return self._day_of_week

    @day_of_week.setter
    def day_of_week(self, day_of_week):
        """Sets the day_of_week of this PublicInboxWorkingHours.

        Day of the week as a number. Sunday -> 0, Saturday -> 6  # noqa: E501

        :param day_of_week: The day_of_week of this PublicInboxWorkingHours.  # noqa: E501
        :type: int
        """

        self._day_of_week = day_of_week

    @property
    def open_all_day(self):
        """Gets the open_all_day of this PublicInboxWorkingHours.  # noqa: E501

        Whether or not the business is open the whole day  # noqa: E501

        :return: The open_all_day of this PublicInboxWorkingHours.  # noqa: E501
        :rtype: bool
        """
        return self._open_all_day

    @open_all_day.setter
    def open_all_day(self, open_all_day):
        """Sets the open_all_day of this PublicInboxWorkingHours.

        Whether or not the business is open the whole day  # noqa: E501

        :param open_all_day: The open_all_day of this PublicInboxWorkingHours.  # noqa: E501
        :type: bool
        """

        self._open_all_day = open_all_day

    @property
    def closed_all_day(self):
        """Gets the closed_all_day of this PublicInboxWorkingHours.  # noqa: E501

        Whether or not the business is closed the whole day  # noqa: E501

        :return: The closed_all_day of this PublicInboxWorkingHours.  # noqa: E501
        :rtype: bool
        """
        return self._closed_all_day

    @closed_all_day.setter
    def closed_all_day(self, closed_all_day):
        """Sets the closed_all_day of this PublicInboxWorkingHours.

        Whether or not the business is closed the whole day  # noqa: E501

        :param closed_all_day: The closed_all_day of this PublicInboxWorkingHours.  # noqa: E501
        :type: bool
        """

        self._closed_all_day = closed_all_day

    @property
    def open_hour(self):
        """Gets the open_hour of this PublicInboxWorkingHours.  # noqa: E501

        Opening hour. Can be null if closed all day  # noqa: E501

        :return: The open_hour of this PublicInboxWorkingHours.  # noqa: E501
        :rtype: int
        """
        return self._open_hour

    @open_hour.setter
    def open_hour(self, open_hour):
        """Sets the open_hour of this PublicInboxWorkingHours.

        Opening hour. Can be null if closed all day  # noqa: E501

        :param open_hour: The open_hour of this PublicInboxWorkingHours.  # noqa: E501
        :type: int
        """

        self._open_hour = open_hour

    @property
    def open_minutes(self):
        """Gets the open_minutes of this PublicInboxWorkingHours.  # noqa: E501

        Opening minute. Can be null if closed all day  # noqa: E501

        :return: The open_minutes of this PublicInboxWorkingHours.  # noqa: E501
        :rtype: int
        """
        return self._open_minutes

    @open_minutes.setter
    def open_minutes(self, open_minutes):
        """Sets the open_minutes of this PublicInboxWorkingHours.

        Opening minute. Can be null if closed all day  # noqa: E501

        :param open_minutes: The open_minutes of this PublicInboxWorkingHours.  # noqa: E501
        :type: int
        """

        self._open_minutes = open_minutes

    @property
    def close_hour(self):
        """Gets the close_hour of this PublicInboxWorkingHours.  # noqa: E501

        Closing hour. Can be null if closed all day  # noqa: E501

        :return: The close_hour of this PublicInboxWorkingHours.  # noqa: E501
        :rtype: int
        """
        return self._close_hour

    @close_hour.setter
    def close_hour(self, close_hour):
        """Sets the close_hour of this PublicInboxWorkingHours.

        Closing hour. Can be null if closed all day  # noqa: E501

        :param close_hour: The close_hour of this PublicInboxWorkingHours.  # noqa: E501
        :type: int
        """

        self._close_hour = close_hour

    @property
    def close_minutes(self):
        """Gets the close_minutes of this PublicInboxWorkingHours.  # noqa: E501

        Closing minute. Can be null if closed all day  # noqa: E501

        :return: The close_minutes of this PublicInboxWorkingHours.  # noqa: E501
        :rtype: int
        """
        return self._close_minutes

    @close_minutes.setter
    def close_minutes(self, close_minutes):
        """Sets the close_minutes of this PublicInboxWorkingHours.

        Closing minute. Can be null if closed all day  # noqa: E501

        :param close_minutes: The close_minutes of this PublicInboxWorkingHours.  # noqa: E501
        :type: int
        """

        self._close_minutes = close_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicInboxWorkingHours, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicInboxWorkingHours):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
