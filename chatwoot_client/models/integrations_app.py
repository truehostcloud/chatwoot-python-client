# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntegrationsApp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'hook_type': 'str',
        'enabled': 'bool',
        'allow_multiple_hooks': 'bool',
        'hooks': 'list[object]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'hook_type': 'hook_type',
        'enabled': 'enabled',
        'allow_multiple_hooks': 'allow_multiple_hooks',
        'hooks': 'hooks'
    }

    def __init__(self, id=None, name=None, description=None, hook_type=None, enabled=None, allow_multiple_hooks=None, hooks=None):  # noqa: E501
        """IntegrationsApp - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._hook_type = None
        self._enabled = None
        self._allow_multiple_hooks = None
        self._hooks = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if hook_type is not None:
            self.hook_type = hook_type
        if enabled is not None:
            self.enabled = enabled
        if allow_multiple_hooks is not None:
            self.allow_multiple_hooks = allow_multiple_hooks
        if hooks is not None:
            self.hooks = hooks

    @property
    def id(self):
        """Gets the id of this IntegrationsApp.  # noqa: E501

        The ID of the integration  # noqa: E501

        :return: The id of this IntegrationsApp.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IntegrationsApp.

        The ID of the integration  # noqa: E501

        :param id: The id of this IntegrationsApp.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IntegrationsApp.  # noqa: E501

        The name of the integration  # noqa: E501

        :return: The name of this IntegrationsApp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IntegrationsApp.

        The name of the integration  # noqa: E501

        :param name: The name of this IntegrationsApp.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this IntegrationsApp.  # noqa: E501

        The description about the team  # noqa: E501

        :return: The description of this IntegrationsApp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this IntegrationsApp.

        The description about the team  # noqa: E501

        :param description: The description of this IntegrationsApp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def hook_type(self):
        """Gets the hook_type of this IntegrationsApp.  # noqa: E501

        Whether the integration is an account or inbox integration  # noqa: E501

        :return: The hook_type of this IntegrationsApp.  # noqa: E501
        :rtype: str
        """
        return self._hook_type

    @hook_type.setter
    def hook_type(self, hook_type):
        """Sets the hook_type of this IntegrationsApp.

        Whether the integration is an account or inbox integration  # noqa: E501

        :param hook_type: The hook_type of this IntegrationsApp.  # noqa: E501
        :type: str
        """

        self._hook_type = hook_type

    @property
    def enabled(self):
        """Gets the enabled of this IntegrationsApp.  # noqa: E501

        Whether the integration is enabled for the account  # noqa: E501

        :return: The enabled of this IntegrationsApp.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this IntegrationsApp.

        Whether the integration is enabled for the account  # noqa: E501

        :param enabled: The enabled of this IntegrationsApp.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def allow_multiple_hooks(self):
        """Gets the allow_multiple_hooks of this IntegrationsApp.  # noqa: E501

        Whether multiple hooks can be created for the integration  # noqa: E501

        :return: The allow_multiple_hooks of this IntegrationsApp.  # noqa: E501
        :rtype: bool
        """
        return self._allow_multiple_hooks

    @allow_multiple_hooks.setter
    def allow_multiple_hooks(self, allow_multiple_hooks):
        """Sets the allow_multiple_hooks of this IntegrationsApp.

        Whether multiple hooks can be created for the integration  # noqa: E501

        :param allow_multiple_hooks: The allow_multiple_hooks of this IntegrationsApp.  # noqa: E501
        :type: bool
        """

        self._allow_multiple_hooks = allow_multiple_hooks

    @property
    def hooks(self):
        """Gets the hooks of this IntegrationsApp.  # noqa: E501

        If there are any hooks created for this integration  # noqa: E501

        :return: The hooks of this IntegrationsApp.  # noqa: E501
        :rtype: list[object]
        """
        return self._hooks

    @hooks.setter
    def hooks(self, hooks):
        """Sets the hooks of this IntegrationsApp.

        If there are any hooks created for this integration  # noqa: E501

        :param hooks: The hooks of this IntegrationsApp.  # noqa: E501
        :type: list[object]
        """

        self._hooks = hooks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntegrationsApp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntegrationsApp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
