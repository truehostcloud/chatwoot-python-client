# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Article(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'content': 'str',
        'meta': 'object',
        'position': 'int',
        'status': 'int',
        'title': 'str',
        'slug': 'str',
        'views': 'int',
        'portal_id': 'int',
        'account_id': 'int',
        'author_id': 'int',
        'category_id': 'int',
        'folder_id': 'int',
        'associated_article_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'content': 'content',
        'meta': 'meta',
        'position': 'position',
        'status': 'status',
        'title': 'title',
        'slug': 'slug',
        'views': 'views',
        'portal_id': 'portal_id',
        'account_id': 'account_id',
        'author_id': 'author_id',
        'category_id': 'category_id',
        'folder_id': 'folder_id',
        'associated_article_id': 'associated_article_id'
    }

    def __init__(self, id=None, content=None, meta=None, position=None, status=None, title=None, slug=None, views=None, portal_id=None, account_id=None, author_id=None, category_id=None, folder_id=None, associated_article_id=None):  # noqa: E501
        """Article - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._content = None
        self._meta = None
        self._position = None
        self._status = None
        self._title = None
        self._slug = None
        self._views = None
        self._portal_id = None
        self._account_id = None
        self._author_id = None
        self._category_id = None
        self._folder_id = None
        self._associated_article_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if content is not None:
            self.content = content
        if meta is not None:
            self.meta = meta
        if position is not None:
            self.position = position
        if status is not None:
            self.status = status
        if title is not None:
            self.title = title
        if slug is not None:
            self.slug = slug
        if views is not None:
            self.views = views
        if portal_id is not None:
            self.portal_id = portal_id
        if account_id is not None:
            self.account_id = account_id
        if author_id is not None:
            self.author_id = author_id
        if category_id is not None:
            self.category_id = category_id
        if folder_id is not None:
            self.folder_id = folder_id
        if associated_article_id is not None:
            self.associated_article_id = associated_article_id

    @property
    def id(self):
        """Gets the id of this Article.  # noqa: E501


        :return: The id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Article.


        :param id: The id of this Article.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content(self):
        """Gets the content of this Article.  # noqa: E501

        The text content.  # noqa: E501

        :return: The content of this Article.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Article.

        The text content.  # noqa: E501

        :param content: The content of this Article.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def meta(self):
        """Gets the meta of this Article.  # noqa: E501


        :return: The meta of this Article.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this Article.


        :param meta: The meta of this Article.  # noqa: E501
        :type: object
        """

        self._meta = meta

    @property
    def position(self):
        """Gets the position of this Article.  # noqa: E501


        :return: The position of this Article.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Article.


        :param position: The position of this Article.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def status(self):
        """Gets the status of this Article.  # noqa: E501


        :return: The status of this Article.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Article.


        :param status: The status of this Article.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def title(self):
        """Gets the title of this Article.  # noqa: E501


        :return: The title of this Article.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Article.


        :param title: The title of this Article.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def slug(self):
        """Gets the slug of this Article.  # noqa: E501


        :return: The slug of this Article.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Article.


        :param slug: The slug of this Article.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def views(self):
        """Gets the views of this Article.  # noqa: E501


        :return: The views of this Article.  # noqa: E501
        :rtype: int
        """
        return self._views

    @views.setter
    def views(self, views):
        """Sets the views of this Article.


        :param views: The views of this Article.  # noqa: E501
        :type: int
        """

        self._views = views

    @property
    def portal_id(self):
        """Gets the portal_id of this Article.  # noqa: E501


        :return: The portal_id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._portal_id

    @portal_id.setter
    def portal_id(self, portal_id):
        """Sets the portal_id of this Article.


        :param portal_id: The portal_id of this Article.  # noqa: E501
        :type: int
        """

        self._portal_id = portal_id

    @property
    def account_id(self):
        """Gets the account_id of this Article.  # noqa: E501


        :return: The account_id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Article.


        :param account_id: The account_id of this Article.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def author_id(self):
        """Gets the author_id of this Article.  # noqa: E501


        :return: The author_id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Article.


        :param author_id: The author_id of this Article.  # noqa: E501
        :type: int
        """

        self._author_id = author_id

    @property
    def category_id(self):
        """Gets the category_id of this Article.  # noqa: E501


        :return: The category_id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this Article.


        :param category_id: The category_id of this Article.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def folder_id(self):
        """Gets the folder_id of this Article.  # noqa: E501


        :return: The folder_id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this Article.


        :param folder_id: The folder_id of this Article.  # noqa: E501
        :type: int
        """

        self._folder_id = folder_id

    @property
    def associated_article_id(self):
        """Gets the associated_article_id of this Article.  # noqa: E501

        To associate similar articles to each other, e.g to provide the link for the reference.  # noqa: E501

        :return: The associated_article_id of this Article.  # noqa: E501
        :rtype: int
        """
        return self._associated_article_id

    @associated_article_id.setter
    def associated_article_id(self, associated_article_id):
        """Sets the associated_article_id of this Article.

        To associate similar articles to each other, e.g to provide the link for the reference.  # noqa: E501

        :param associated_article_id: The associated_article_id of this Article.  # noqa: E501
        :type: int
        """

        self._associated_article_id = associated_article_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Article, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Article):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
