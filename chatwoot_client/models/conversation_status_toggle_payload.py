# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationStatusTogglePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'success': 'bool',
        'current_status': 'str',
        'conversation_id': 'float'
    }

    attribute_map = {
        'success': 'success',
        'current_status': 'current_status',
        'conversation_id': 'conversation_id'
    }

    def __init__(self, success=None, current_status=None, conversation_id=None):  # noqa: E501
        """ConversationStatusTogglePayload - a model defined in Swagger"""  # noqa: E501
        self._success = None
        self._current_status = None
        self._conversation_id = None
        self.discriminator = None
        if success is not None:
            self.success = success
        if current_status is not None:
            self.current_status = current_status
        if conversation_id is not None:
            self.conversation_id = conversation_id

    @property
    def success(self):
        """Gets the success of this ConversationStatusTogglePayload.  # noqa: E501


        :return: The success of this ConversationStatusTogglePayload.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ConversationStatusTogglePayload.


        :param success: The success of this ConversationStatusTogglePayload.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def current_status(self):
        """Gets the current_status of this ConversationStatusTogglePayload.  # noqa: E501


        :return: The current_status of this ConversationStatusTogglePayload.  # noqa: E501
        :rtype: str
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status):
        """Sets the current_status of this ConversationStatusTogglePayload.


        :param current_status: The current_status of this ConversationStatusTogglePayload.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "resolved"]  # noqa: E501
        if current_status not in allowed_values:
            raise ValueError(
                "Invalid value for `current_status` ({0}), must be one of {1}"  # noqa: E501
                .format(current_status, allowed_values)
            )

        self._current_status = current_status

    @property
    def conversation_id(self):
        """Gets the conversation_id of this ConversationStatusTogglePayload.  # noqa: E501


        :return: The conversation_id of this ConversationStatusTogglePayload.  # noqa: E501
        :rtype: float
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this ConversationStatusTogglePayload.


        :param conversation_id: The conversation_id of this ConversationStatusTogglePayload.  # noqa: E501
        :type: float
        """

        self._conversation_id = conversation_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationStatusTogglePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationStatusTogglePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
