# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationListDataMeta(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mine_count': 'int',
        'unassigned_count': 'int',
        'assigned_count': 'int',
        'all_count': 'int'
    }

    attribute_map = {
        'mine_count': 'mine_count',
        'unassigned_count': 'unassigned_count',
        'assigned_count': 'assigned_count',
        'all_count': 'all_count'
    }

    def __init__(self, mine_count=None, unassigned_count=None, assigned_count=None, all_count=None):  # noqa: E501
        """ConversationListDataMeta - a model defined in Swagger"""  # noqa: E501
        self._mine_count = None
        self._unassigned_count = None
        self._assigned_count = None
        self._all_count = None
        self.discriminator = None
        if mine_count is not None:
            self.mine_count = mine_count
        if unassigned_count is not None:
            self.unassigned_count = unassigned_count
        if assigned_count is not None:
            self.assigned_count = assigned_count
        if all_count is not None:
            self.all_count = all_count

    @property
    def mine_count(self):
        """Gets the mine_count of this ConversationListDataMeta.  # noqa: E501


        :return: The mine_count of this ConversationListDataMeta.  # noqa: E501
        :rtype: int
        """
        return self._mine_count

    @mine_count.setter
    def mine_count(self, mine_count):
        """Sets the mine_count of this ConversationListDataMeta.


        :param mine_count: The mine_count of this ConversationListDataMeta.  # noqa: E501
        :type: int
        """

        self._mine_count = mine_count

    @property
    def unassigned_count(self):
        """Gets the unassigned_count of this ConversationListDataMeta.  # noqa: E501


        :return: The unassigned_count of this ConversationListDataMeta.  # noqa: E501
        :rtype: int
        """
        return self._unassigned_count

    @unassigned_count.setter
    def unassigned_count(self, unassigned_count):
        """Sets the unassigned_count of this ConversationListDataMeta.


        :param unassigned_count: The unassigned_count of this ConversationListDataMeta.  # noqa: E501
        :type: int
        """

        self._unassigned_count = unassigned_count

    @property
    def assigned_count(self):
        """Gets the assigned_count of this ConversationListDataMeta.  # noqa: E501


        :return: The assigned_count of this ConversationListDataMeta.  # noqa: E501
        :rtype: int
        """
        return self._assigned_count

    @assigned_count.setter
    def assigned_count(self, assigned_count):
        """Sets the assigned_count of this ConversationListDataMeta.


        :param assigned_count: The assigned_count of this ConversationListDataMeta.  # noqa: E501
        :type: int
        """

        self._assigned_count = assigned_count

    @property
    def all_count(self):
        """Gets the all_count of this ConversationListDataMeta.  # noqa: E501


        :return: The all_count of this ConversationListDataMeta.  # noqa: E501
        :rtype: int
        """
        return self._all_count

    @all_count.setter
    def all_count(self, all_count):
        """Sets the all_count of this ConversationListDataMeta.


        :param all_count: The all_count of this ConversationListDataMeta.  # noqa: E501
        :type: int
        """

        self._all_count = all_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationListDataMeta, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationListDataMeta):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
