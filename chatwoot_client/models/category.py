# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Category(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'description': 'str',
        'locale': 'str',
        'name': 'str',
        'slug': 'str',
        'position': 'int',
        'portal_id': 'int',
        'account_id': 'int',
        'associated_category_id': 'int',
        'parent_category_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'description': 'description',
        'locale': 'locale',
        'name': 'name',
        'slug': 'slug',
        'position': 'position',
        'portal_id': 'portal_id',
        'account_id': 'account_id',
        'associated_category_id': 'associated_category_id',
        'parent_category_id': 'parent_category_id'
    }

    def __init__(self, id=None, description=None, locale=None, name=None, slug=None, position=None, portal_id=None, account_id=None, associated_category_id=None, parent_category_id=None):  # noqa: E501
        """Category - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._description = None
        self._locale = None
        self._name = None
        self._slug = None
        self._position = None
        self._portal_id = None
        self._account_id = None
        self._associated_category_id = None
        self._parent_category_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if locale is not None:
            self.locale = locale
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if position is not None:
            self.position = position
        if portal_id is not None:
            self.portal_id = portal_id
        if account_id is not None:
            self.account_id = account_id
        if associated_category_id is not None:
            self.associated_category_id = associated_category_id
        if parent_category_id is not None:
            self.parent_category_id = parent_category_id

    @property
    def id(self):
        """Gets the id of this Category.  # noqa: E501


        :return: The id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Category.


        :param id: The id of this Category.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Category.  # noqa: E501

        The text content.  # noqa: E501

        :return: The description of this Category.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Category.

        The text content.  # noqa: E501

        :param description: The description of this Category.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def locale(self):
        """Gets the locale of this Category.  # noqa: E501


        :return: The locale of this Category.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Category.


        :param locale: The locale of this Category.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this Category.  # noqa: E501


        :return: The name of this Category.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Category.


        :param name: The name of this Category.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Category.  # noqa: E501


        :return: The slug of this Category.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Category.


        :param slug: The slug of this Category.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def position(self):
        """Gets the position of this Category.  # noqa: E501


        :return: The position of this Category.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this Category.


        :param position: The position of this Category.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def portal_id(self):
        """Gets the portal_id of this Category.  # noqa: E501


        :return: The portal_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._portal_id

    @portal_id.setter
    def portal_id(self, portal_id):
        """Sets the portal_id of this Category.


        :param portal_id: The portal_id of this Category.  # noqa: E501
        :type: int
        """

        self._portal_id = portal_id

    @property
    def account_id(self):
        """Gets the account_id of this Category.  # noqa: E501


        :return: The account_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Category.


        :param account_id: The account_id of this Category.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def associated_category_id(self):
        """Gets the associated_category_id of this Category.  # noqa: E501

        To associate similar categories to each other, e.g same category of product documentation in different languages  # noqa: E501

        :return: The associated_category_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._associated_category_id

    @associated_category_id.setter
    def associated_category_id(self, associated_category_id):
        """Sets the associated_category_id of this Category.

        To associate similar categories to each other, e.g same category of product documentation in different languages  # noqa: E501

        :param associated_category_id: The associated_category_id of this Category.  # noqa: E501
        :type: int
        """

        self._associated_category_id = associated_category_id

    @property
    def parent_category_id(self):
        """Gets the parent_category_id of this Category.  # noqa: E501

        To define parent category, e.g product documentation has multiple level features in sales category or in engineering category.  # noqa: E501

        :return: The parent_category_id of this Category.  # noqa: E501
        :rtype: int
        """
        return self._parent_category_id

    @parent_category_id.setter
    def parent_category_id(self, parent_category_id):
        """Sets the parent_category_id of this Category.

        To define parent category, e.g product documentation has multiple level features in sales category or in engineering category.  # noqa: E501

        :param parent_category_id: The parent_category_id of this Category.  # noqa: E501
        :type: int
        """

        self._parent_category_id = parent_category_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Category, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Category):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
