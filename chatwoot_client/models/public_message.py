# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'content': 'str',
        'message_type': 'str',
        'content_type': 'str',
        'content_attributes': 'str',
        'created_at': 'str',
        'conversation_id': 'str',
        'attachments': 'list[object]',
        'sender': 'object'
    }

    attribute_map = {
        'id': 'id',
        'content': 'content',
        'message_type': 'message_type',
        'content_type': 'content_type',
        'content_attributes': 'content_attributes',
        'created_at': 'created_at',
        'conversation_id': 'conversation_id',
        'attachments': 'attachments',
        'sender': 'sender'
    }

    def __init__(self, id=None, content=None, message_type=None, content_type=None, content_attributes=None, created_at=None, conversation_id=None, attachments=None, sender=None):  # noqa: E501
        """PublicMessage - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._content = None
        self._message_type = None
        self._content_type = None
        self._content_attributes = None
        self._created_at = None
        self._conversation_id = None
        self._attachments = None
        self._sender = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if content is not None:
            self.content = content
        if message_type is not None:
            self.message_type = message_type
        if content_type is not None:
            self.content_type = content_type
        if content_attributes is not None:
            self.content_attributes = content_attributes
        if created_at is not None:
            self.created_at = created_at
        if conversation_id is not None:
            self.conversation_id = conversation_id
        if attachments is not None:
            self.attachments = attachments
        if sender is not None:
            self.sender = sender

    @property
    def id(self):
        """Gets the id of this PublicMessage.  # noqa: E501

        Id of the message  # noqa: E501

        :return: The id of this PublicMessage.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicMessage.

        Id of the message  # noqa: E501

        :param id: The id of this PublicMessage.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def content(self):
        """Gets the content of this PublicMessage.  # noqa: E501

        Text content of the message  # noqa: E501

        :return: The content of this PublicMessage.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this PublicMessage.

        Text content of the message  # noqa: E501

        :param content: The content of this PublicMessage.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def message_type(self):
        """Gets the message_type of this PublicMessage.  # noqa: E501

        Denotes the message type  # noqa: E501

        :return: The message_type of this PublicMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this PublicMessage.

        Denotes the message type  # noqa: E501

        :param message_type: The message_type of this PublicMessage.  # noqa: E501
        :type: str
        """

        self._message_type = message_type

    @property
    def content_type(self):
        """Gets the content_type of this PublicMessage.  # noqa: E501

        Content type of the message  # noqa: E501

        :return: The content_type of this PublicMessage.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this PublicMessage.

        Content type of the message  # noqa: E501

        :param content_type: The content_type of this PublicMessage.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def content_attributes(self):
        """Gets the content_attributes of this PublicMessage.  # noqa: E501

        Additional content attributes of the message  # noqa: E501

        :return: The content_attributes of this PublicMessage.  # noqa: E501
        :rtype: str
        """
        return self._content_attributes

    @content_attributes.setter
    def content_attributes(self, content_attributes):
        """Sets the content_attributes of this PublicMessage.

        Additional content attributes of the message  # noqa: E501

        :param content_attributes: The content_attributes of this PublicMessage.  # noqa: E501
        :type: str
        """

        self._content_attributes = content_attributes

    @property
    def created_at(self):
        """Gets the created_at of this PublicMessage.  # noqa: E501

        Created at time stamp of the message  # noqa: E501

        :return: The created_at of this PublicMessage.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this PublicMessage.

        Created at time stamp of the message  # noqa: E501

        :param created_at: The created_at of this PublicMessage.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def conversation_id(self):
        """Gets the conversation_id of this PublicMessage.  # noqa: E501

        Conversation Id of the message  # noqa: E501

        :return: The conversation_id of this PublicMessage.  # noqa: E501
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this PublicMessage.

        Conversation Id of the message  # noqa: E501

        :param conversation_id: The conversation_id of this PublicMessage.  # noqa: E501
        :type: str
        """

        self._conversation_id = conversation_id

    @property
    def attachments(self):
        """Gets the attachments of this PublicMessage.  # noqa: E501

        Attachments if any  # noqa: E501

        :return: The attachments of this PublicMessage.  # noqa: E501
        :rtype: list[object]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this PublicMessage.

        Attachments if any  # noqa: E501

        :param attachments: The attachments of this PublicMessage.  # noqa: E501
        :type: list[object]
        """

        self._attachments = attachments

    @property
    def sender(self):
        """Gets the sender of this PublicMessage.  # noqa: E501

        Details of the sender  # noqa: E501

        :return: The sender of this PublicMessage.  # noqa: E501
        :rtype: object
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this PublicMessage.

        Details of the sender  # noqa: E501

        :param sender: The sender of this PublicMessage.  # noqa: E501
        :type: object
        """

        self._sender = sender

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
