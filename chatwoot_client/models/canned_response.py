# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CannedResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'content': 'str',
        'short_code': 'str',
        'account_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'content': 'content',
        'short_code': 'short_code',
        'account_id': 'account_id'
    }

    def __init__(self, id=None, content=None, short_code=None, account_id=None):  # noqa: E501
        """CannedResponse - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._content = None
        self._short_code = None
        self._account_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if content is not None:
            self.content = content
        if short_code is not None:
            self.short_code = short_code
        if account_id is not None:
            self.account_id = account_id

    @property
    def id(self):
        """Gets the id of this CannedResponse.  # noqa: E501

        ID of the canned response  # noqa: E501

        :return: The id of this CannedResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CannedResponse.

        ID of the canned response  # noqa: E501

        :param id: The id of this CannedResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def content(self):
        """Gets the content of this CannedResponse.  # noqa: E501

        Message content for canned response  # noqa: E501

        :return: The content of this CannedResponse.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CannedResponse.

        Message content for canned response  # noqa: E501

        :param content: The content of this CannedResponse.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def short_code(self):
        """Gets the short_code of this CannedResponse.  # noqa: E501

        Short Code for quick access of the canned response  # noqa: E501

        :return: The short_code of this CannedResponse.  # noqa: E501
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """Sets the short_code of this CannedResponse.

        Short Code for quick access of the canned response  # noqa: E501

        :param short_code: The short_code of this CannedResponse.  # noqa: E501
        :type: str
        """

        self._short_code = short_code

    @property
    def account_id(self):
        """Gets the account_id of this CannedResponse.  # noqa: E501

        Account Id  # noqa: E501

        :return: The account_id of this CannedResponse.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CannedResponse.

        Account Id  # noqa: E501

        :param account_id: The account_id of this CannedResponse.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CannedResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CannedResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
