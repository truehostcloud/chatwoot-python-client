# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AutomationRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'event_name': 'str',
        'name': 'str',
        'description': 'str',
        'active': 'bool',
        'actions': 'list[object]',
        'conditions': 'list[object]',
        'account_id': 'int'
    }

    attribute_map = {
        'event_name': 'event_name',
        'name': 'name',
        'description': 'description',
        'active': 'active',
        'actions': 'actions',
        'conditions': 'conditions',
        'account_id': 'account_id'
    }

    def __init__(self, event_name=None, name=None, description=None, active=None, actions=None, conditions=None, account_id=None):  # noqa: E501
        """AutomationRule - a model defined in Swagger"""  # noqa: E501
        self._event_name = None
        self._name = None
        self._description = None
        self._active = None
        self._actions = None
        self._conditions = None
        self._account_id = None
        self.discriminator = None
        if event_name is not None:
            self.event_name = event_name
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if active is not None:
            self.active = active
        if actions is not None:
            self.actions = actions
        if conditions is not None:
            self.conditions = conditions
        if account_id is not None:
            self.account_id = account_id

    @property
    def event_name(self):
        """Gets the event_name of this AutomationRule.  # noqa: E501

        Automation Rule event, on which we call the actions(conversation_created, conversation_updated, message_created)  # noqa: E501

        :return: The event_name of this AutomationRule.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this AutomationRule.

        Automation Rule event, on which we call the actions(conversation_created, conversation_updated, message_created)  # noqa: E501

        :param event_name: The event_name of this AutomationRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["conversation_created", "conversation_updated", "message_created"]  # noqa: E501
        if event_name not in allowed_values:
            raise ValueError(
                "Invalid value for `event_name` ({0}), must be one of {1}"  # noqa: E501
                .format(event_name, allowed_values)
            )

        self._event_name = event_name

    @property
    def name(self):
        """Gets the name of this AutomationRule.  # noqa: E501

        The name of the rule  # noqa: E501

        :return: The name of this AutomationRule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AutomationRule.

        The name of the rule  # noqa: E501

        :param name: The name of this AutomationRule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AutomationRule.  # noqa: E501

        Description to give more context about the rule  # noqa: E501

        :return: The description of this AutomationRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AutomationRule.

        Description to give more context about the rule  # noqa: E501

        :param description: The description of this AutomationRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def active(self):
        """Gets the active of this AutomationRule.  # noqa: E501

        Enable/disable automation rule  # noqa: E501

        :return: The active of this AutomationRule.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this AutomationRule.

        Enable/disable automation rule  # noqa: E501

        :param active: The active of this AutomationRule.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def actions(self):
        """Gets the actions of this AutomationRule.  # noqa: E501

        Array of actions which we perform when condition matches  # noqa: E501

        :return: The actions of this AutomationRule.  # noqa: E501
        :rtype: list[object]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this AutomationRule.

        Array of actions which we perform when condition matches  # noqa: E501

        :param actions: The actions of this AutomationRule.  # noqa: E501
        :type: list[object]
        """

        self._actions = actions

    @property
    def conditions(self):
        """Gets the conditions of this AutomationRule.  # noqa: E501

        Array of conditions on which conversation/message filter would work  # noqa: E501

        :return: The conditions of this AutomationRule.  # noqa: E501
        :rtype: list[object]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AutomationRule.

        Array of conditions on which conversation/message filter would work  # noqa: E501

        :param conditions: The conditions of this AutomationRule.  # noqa: E501
        :type: list[object]
        """

        self._conditions = conditions

    @property
    def account_id(self):
        """Gets the account_id of this AutomationRule.  # noqa: E501

        Account Id  # noqa: E501

        :return: The account_id of this AutomationRule.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this AutomationRule.

        Account Id  # noqa: E501

        :param account_id: The account_id of this AutomationRule.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutomationRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutomationRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
