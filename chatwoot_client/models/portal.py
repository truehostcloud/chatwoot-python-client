# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Portal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'archived': 'bool',
        'color': 'str',
        'config': 'object',
        'custom_domain': 'str',
        'header_text': 'str',
        'homepage_link': 'str',
        'name': 'str',
        'slug': 'str',
        'page_title': 'str',
        'account_id': 'int',
        'categories': 'list[Category]',
        'articles': 'list[Article]'
    }

    attribute_map = {
        'id': 'id',
        'archived': 'archived',
        'color': 'color',
        'config': 'config',
        'custom_domain': 'custom_domain',
        'header_text': 'header_text',
        'homepage_link': 'homepage_link',
        'name': 'name',
        'slug': 'slug',
        'page_title': 'page_title',
        'account_id': 'account_id',
        'categories': 'categories',
        'articles': 'articles'
    }

    def __init__(self, id=None, archived=None, color=None, config=None, custom_domain=None, header_text=None, homepage_link=None, name=None, slug=None, page_title=None, account_id=None, categories=None, articles=None):  # noqa: E501
        """Portal - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._archived = None
        self._color = None
        self._config = None
        self._custom_domain = None
        self._header_text = None
        self._homepage_link = None
        self._name = None
        self._slug = None
        self._page_title = None
        self._account_id = None
        self._categories = None
        self._articles = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if archived is not None:
            self.archived = archived
        if color is not None:
            self.color = color
        if config is not None:
            self.config = config
        if custom_domain is not None:
            self.custom_domain = custom_domain
        if header_text is not None:
            self.header_text = header_text
        if homepage_link is not None:
            self.homepage_link = homepage_link
        if name is not None:
            self.name = name
        if slug is not None:
            self.slug = slug
        if page_title is not None:
            self.page_title = page_title
        if account_id is not None:
            self.account_id = account_id
        if categories is not None:
            self.categories = categories
        if articles is not None:
            self.articles = articles

    @property
    def id(self):
        """Gets the id of this Portal.  # noqa: E501


        :return: The id of this Portal.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Portal.


        :param id: The id of this Portal.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def archived(self):
        """Gets the archived of this Portal.  # noqa: E501


        :return: The archived of this Portal.  # noqa: E501
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this Portal.


        :param archived: The archived of this Portal.  # noqa: E501
        :type: bool
        """

        self._archived = archived

    @property
    def color(self):
        """Gets the color of this Portal.  # noqa: E501


        :return: The color of this Portal.  # noqa: E501
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Portal.


        :param color: The color of this Portal.  # noqa: E501
        :type: str
        """

        self._color = color

    @property
    def config(self):
        """Gets the config of this Portal.  # noqa: E501

        Save information about locales, allowed_locales and default portal/help-center locale  # noqa: E501

        :return: The config of this Portal.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Portal.

        Save information about locales, allowed_locales and default portal/help-center locale  # noqa: E501

        :param config: The config of this Portal.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def custom_domain(self):
        """Gets the custom_domain of this Portal.  # noqa: E501


        :return: The custom_domain of this Portal.  # noqa: E501
        :rtype: str
        """
        return self._custom_domain

    @custom_domain.setter
    def custom_domain(self, custom_domain):
        """Sets the custom_domain of this Portal.


        :param custom_domain: The custom_domain of this Portal.  # noqa: E501
        :type: str
        """

        self._custom_domain = custom_domain

    @property
    def header_text(self):
        """Gets the header_text of this Portal.  # noqa: E501

        The text content.  # noqa: E501

        :return: The header_text of this Portal.  # noqa: E501
        :rtype: str
        """
        return self._header_text

    @header_text.setter
    def header_text(self, header_text):
        """Sets the header_text of this Portal.

        The text content.  # noqa: E501

        :param header_text: The header_text of this Portal.  # noqa: E501
        :type: str
        """

        self._header_text = header_text

    @property
    def homepage_link(self):
        """Gets the homepage_link of this Portal.  # noqa: E501


        :return: The homepage_link of this Portal.  # noqa: E501
        :rtype: str
        """
        return self._homepage_link

    @homepage_link.setter
    def homepage_link(self, homepage_link):
        """Sets the homepage_link of this Portal.


        :param homepage_link: The homepage_link of this Portal.  # noqa: E501
        :type: str
        """

        self._homepage_link = homepage_link

    @property
    def name(self):
        """Gets the name of this Portal.  # noqa: E501


        :return: The name of this Portal.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Portal.


        :param name: The name of this Portal.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def slug(self):
        """Gets the slug of this Portal.  # noqa: E501


        :return: The slug of this Portal.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Portal.


        :param slug: The slug of this Portal.  # noqa: E501
        :type: str
        """

        self._slug = slug

    @property
    def page_title(self):
        """Gets the page_title of this Portal.  # noqa: E501


        :return: The page_title of this Portal.  # noqa: E501
        :rtype: str
        """
        return self._page_title

    @page_title.setter
    def page_title(self, page_title):
        """Sets the page_title of this Portal.


        :param page_title: The page_title of this Portal.  # noqa: E501
        :type: str
        """

        self._page_title = page_title

    @property
    def account_id(self):
        """Gets the account_id of this Portal.  # noqa: E501


        :return: The account_id of this Portal.  # noqa: E501
        :rtype: int
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Portal.


        :param account_id: The account_id of this Portal.  # noqa: E501
        :type: int
        """

        self._account_id = account_id

    @property
    def categories(self):
        """Gets the categories of this Portal.  # noqa: E501


        :return: The categories of this Portal.  # noqa: E501
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Portal.


        :param categories: The categories of this Portal.  # noqa: E501
        :type: list[Category]
        """

        self._categories = categories

    @property
    def articles(self):
        """Gets the articles of this Portal.  # noqa: E501


        :return: The articles of this Portal.  # noqa: E501
        :rtype: list[Article]
        """
        return self._articles

    @articles.setter
    def articles(self, articles):
        """Sets the articles of this Portal.


        :param articles: The articles of this Portal.  # noqa: E501
        :type: list[Article]
        """

        self._articles = articles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Portal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Portal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
