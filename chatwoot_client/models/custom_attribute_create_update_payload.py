# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomAttributeCreateUpdatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute_display_name': 'str',
        'attribute_display_type': 'int',
        'attribute_description': 'str',
        'attribute_key': 'str',
        'attribute_values': 'list[str]',
        'attribute_model': 'int'
    }

    attribute_map = {
        'attribute_display_name': 'attribute_display_name',
        'attribute_display_type': 'attribute_display_type',
        'attribute_description': 'attribute_description',
        'attribute_key': 'attribute_key',
        'attribute_values': 'attribute_values',
        'attribute_model': 'attribute_model'
    }

    def __init__(self, attribute_display_name=None, attribute_display_type=None, attribute_description=None, attribute_key=None, attribute_values=None, attribute_model=None):  # noqa: E501
        """CustomAttributeCreateUpdatePayload - a model defined in Swagger"""  # noqa: E501
        self._attribute_display_name = None
        self._attribute_display_type = None
        self._attribute_description = None
        self._attribute_key = None
        self._attribute_values = None
        self._attribute_model = None
        self.discriminator = None
        if attribute_display_name is not None:
            self.attribute_display_name = attribute_display_name
        if attribute_display_type is not None:
            self.attribute_display_type = attribute_display_type
        if attribute_description is not None:
            self.attribute_description = attribute_description
        if attribute_key is not None:
            self.attribute_key = attribute_key
        if attribute_values is not None:
            self.attribute_values = attribute_values
        if attribute_model is not None:
            self.attribute_model = attribute_model

    @property
    def attribute_display_name(self):
        """Gets the attribute_display_name of this CustomAttributeCreateUpdatePayload.  # noqa: E501

        Attribute display name  # noqa: E501

        :return: The attribute_display_name of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._attribute_display_name

    @attribute_display_name.setter
    def attribute_display_name(self, attribute_display_name):
        """Sets the attribute_display_name of this CustomAttributeCreateUpdatePayload.

        Attribute display name  # noqa: E501

        :param attribute_display_name: The attribute_display_name of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :type: str
        """

        self._attribute_display_name = attribute_display_name

    @property
    def attribute_display_type(self):
        """Gets the attribute_display_type of this CustomAttributeCreateUpdatePayload.  # noqa: E501

        Attribute display type (text- 0, number- 1, currency- 2, percent- 3, link- 4, date- 5, list- 6, checkbox- 7)  # noqa: E501

        :return: The attribute_display_type of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._attribute_display_type

    @attribute_display_type.setter
    def attribute_display_type(self, attribute_display_type):
        """Sets the attribute_display_type of this CustomAttributeCreateUpdatePayload.

        Attribute display type (text- 0, number- 1, currency- 2, percent- 3, link- 4, date- 5, list- 6, checkbox- 7)  # noqa: E501

        :param attribute_display_type: The attribute_display_type of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :type: int
        """

        self._attribute_display_type = attribute_display_type

    @property
    def attribute_description(self):
        """Gets the attribute_description of this CustomAttributeCreateUpdatePayload.  # noqa: E501

        Attribute description  # noqa: E501

        :return: The attribute_description of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._attribute_description

    @attribute_description.setter
    def attribute_description(self, attribute_description):
        """Sets the attribute_description of this CustomAttributeCreateUpdatePayload.

        Attribute description  # noqa: E501

        :param attribute_description: The attribute_description of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :type: str
        """

        self._attribute_description = attribute_description

    @property
    def attribute_key(self):
        """Gets the attribute_key of this CustomAttributeCreateUpdatePayload.  # noqa: E501

        Attribute unique key value  # noqa: E501

        :return: The attribute_key of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._attribute_key

    @attribute_key.setter
    def attribute_key(self, attribute_key):
        """Sets the attribute_key of this CustomAttributeCreateUpdatePayload.

        Attribute unique key value  # noqa: E501

        :param attribute_key: The attribute_key of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :type: str
        """

        self._attribute_key = attribute_key

    @property
    def attribute_values(self):
        """Gets the attribute_values of this CustomAttributeCreateUpdatePayload.  # noqa: E501

        Attribute values  # noqa: E501

        :return: The attribute_values of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :rtype: list[str]
        """
        return self._attribute_values

    @attribute_values.setter
    def attribute_values(self, attribute_values):
        """Sets the attribute_values of this CustomAttributeCreateUpdatePayload.

        Attribute values  # noqa: E501

        :param attribute_values: The attribute_values of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :type: list[str]
        """

        self._attribute_values = attribute_values

    @property
    def attribute_model(self):
        """Gets the attribute_model of this CustomAttributeCreateUpdatePayload.  # noqa: E501

        Attribute type(conversation_attribute- 0, contact_attribute- 1)  # noqa: E501

        :return: The attribute_model of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._attribute_model

    @attribute_model.setter
    def attribute_model(self, attribute_model):
        """Sets the attribute_model of this CustomAttributeCreateUpdatePayload.

        Attribute type(conversation_attribute- 0, contact_attribute- 1)  # noqa: E501

        :param attribute_model: The attribute_model of this CustomAttributeCreateUpdatePayload.  # noqa: E501
        :type: int
        """

        self._attribute_model = attribute_model

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomAttributeCreateUpdatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomAttributeCreateUpdatePayload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
