# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Apiv1accountsaccountIdinboxesidChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'website_url': 'str',
        'welcome_title': 'str',
        'welcome_tagline': 'str',
        'agent_away_message': 'str',
        'widget_color': 'str'
    }

    attribute_map = {
        'website_url': 'website_url',
        'welcome_title': 'welcome_title',
        'welcome_tagline': 'welcome_tagline',
        'agent_away_message': 'agent_away_message',
        'widget_color': 'widget_color'
    }

    def __init__(self, website_url=None, welcome_title=None, welcome_tagline=None, agent_away_message=None, widget_color=None):  # noqa: E501
        """Apiv1accountsaccountIdinboxesidChannel - a model defined in Swagger"""  # noqa: E501
        self._website_url = None
        self._welcome_title = None
        self._welcome_tagline = None
        self._agent_away_message = None
        self._widget_color = None
        self.discriminator = None
        if website_url is not None:
            self.website_url = website_url
        if welcome_title is not None:
            self.welcome_title = welcome_title
        if welcome_tagline is not None:
            self.welcome_tagline = welcome_tagline
        if agent_away_message is not None:
            self.agent_away_message = agent_away_message
        if widget_color is not None:
            self.widget_color = widget_color

    @property
    def website_url(self):
        """Gets the website_url of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501

        URL at which the widget will be loaded  # noqa: E501

        :return: The website_url of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :rtype: str
        """
        return self._website_url

    @website_url.setter
    def website_url(self, website_url):
        """Sets the website_url of this Apiv1accountsaccountIdinboxesidChannel.

        URL at which the widget will be loaded  # noqa: E501

        :param website_url: The website_url of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :type: str
        """

        self._website_url = website_url

    @property
    def welcome_title(self):
        """Gets the welcome_title of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501

        Welcome title to be displayed on the widget  # noqa: E501

        :return: The welcome_title of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :rtype: str
        """
        return self._welcome_title

    @welcome_title.setter
    def welcome_title(self, welcome_title):
        """Sets the welcome_title of this Apiv1accountsaccountIdinboxesidChannel.

        Welcome title to be displayed on the widget  # noqa: E501

        :param welcome_title: The welcome_title of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :type: str
        """

        self._welcome_title = welcome_title

    @property
    def welcome_tagline(self):
        """Gets the welcome_tagline of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501

        Welcome tagline to be displayed on the widget  # noqa: E501

        :return: The welcome_tagline of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :rtype: str
        """
        return self._welcome_tagline

    @welcome_tagline.setter
    def welcome_tagline(self, welcome_tagline):
        """Sets the welcome_tagline of this Apiv1accountsaccountIdinboxesidChannel.

        Welcome tagline to be displayed on the widget  # noqa: E501

        :param welcome_tagline: The welcome_tagline of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :type: str
        """

        self._welcome_tagline = welcome_tagline

    @property
    def agent_away_message(self):
        """Gets the agent_away_message of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501

        A message which will be sent if there is not agent available. This is not available if agentbot is connected  # noqa: E501

        :return: The agent_away_message of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :rtype: str
        """
        return self._agent_away_message

    @agent_away_message.setter
    def agent_away_message(self, agent_away_message):
        """Sets the agent_away_message of this Apiv1accountsaccountIdinboxesidChannel.

        A message which will be sent if there is not agent available. This is not available if agentbot is connected  # noqa: E501

        :param agent_away_message: The agent_away_message of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :type: str
        """

        self._agent_away_message = agent_away_message

    @property
    def widget_color(self):
        """Gets the widget_color of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501

        A Hex-color string used to customize the widget  # noqa: E501

        :return: The widget_color of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :rtype: str
        """
        return self._widget_color

    @widget_color.setter
    def widget_color(self, widget_color):
        """Sets the widget_color of this Apiv1accountsaccountIdinboxesidChannel.

        A Hex-color string used to customize the widget  # noqa: E501

        :param widget_color: The widget_color of this Apiv1accountsaccountIdinboxesidChannel.  # noqa: E501
        :type: str
        """

        self._widget_color = widget_color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Apiv1accountsaccountIdinboxesidChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Apiv1accountsaccountIdinboxesidChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
