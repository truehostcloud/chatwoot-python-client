# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountIdConversationsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'str',
        'inbox_id': 'str',
        'contact_id': 'str',
        'additional_attributes': 'object',
        'custom_attributes': 'object',
        'status': 'str',
        'assignee_id': 'str',
        'team_id': 'str',
        'message': 'Apiv1accountsaccountIdconversationsMessage'
    }

    attribute_map = {
        'source_id': 'source_id',
        'inbox_id': 'inbox_id',
        'contact_id': 'contact_id',
        'additional_attributes': 'additional_attributes',
        'custom_attributes': 'custom_attributes',
        'status': 'status',
        'assignee_id': 'assignee_id',
        'team_id': 'team_id',
        'message': 'message'
    }

    def __init__(self, source_id=None, inbox_id=None, contact_id=None, additional_attributes=None, custom_attributes=None, status=None, assignee_id=None, team_id=None, message=None):  # noqa: E501
        """AccountIdConversationsBody - a model defined in Swagger"""  # noqa: E501
        self._source_id = None
        self._inbox_id = None
        self._contact_id = None
        self._additional_attributes = None
        self._custom_attributes = None
        self._status = None
        self._assignee_id = None
        self._team_id = None
        self._message = None
        self.discriminator = None
        self.source_id = source_id
        self.inbox_id = inbox_id
        if contact_id is not None:
            self.contact_id = contact_id
        if additional_attributes is not None:
            self.additional_attributes = additional_attributes
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if status is not None:
            self.status = status
        if assignee_id is not None:
            self.assignee_id = assignee_id
        if team_id is not None:
            self.team_id = team_id
        if message is not None:
            self.message = message

    @property
    def source_id(self):
        """Gets the source_id of this AccountIdConversationsBody.  # noqa: E501

        Conversation source id  # noqa: E501

        :return: The source_id of this AccountIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this AccountIdConversationsBody.

        Conversation source id  # noqa: E501

        :param source_id: The source_id of this AccountIdConversationsBody.  # noqa: E501
        :type: str
        """
        if source_id is None:
            raise ValueError("Invalid value for `source_id`, must not be `None`")  # noqa: E501

        self._source_id = source_id

    @property
    def inbox_id(self):
        """Gets the inbox_id of this AccountIdConversationsBody.  # noqa: E501

        Id of inbox in which the conversation is created <br/> Allowed Inbox Types: Website, Phone, Api, Email  # noqa: E501

        :return: The inbox_id of this AccountIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this AccountIdConversationsBody.

        Id of inbox in which the conversation is created <br/> Allowed Inbox Types: Website, Phone, Api, Email  # noqa: E501

        :param inbox_id: The inbox_id of this AccountIdConversationsBody.  # noqa: E501
        :type: str
        """
        if inbox_id is None:
            raise ValueError("Invalid value for `inbox_id`, must not be `None`")  # noqa: E501

        self._inbox_id = inbox_id

    @property
    def contact_id(self):
        """Gets the contact_id of this AccountIdConversationsBody.  # noqa: E501

        Contact Id for which conversation is created  # noqa: E501

        :return: The contact_id of this AccountIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this AccountIdConversationsBody.

        Contact Id for which conversation is created  # noqa: E501

        :param contact_id: The contact_id of this AccountIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this AccountIdConversationsBody.  # noqa: E501

        Lets you specify attributes like browser information  # noqa: E501

        :return: The additional_attributes of this AccountIdConversationsBody.  # noqa: E501
        :rtype: object
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this AccountIdConversationsBody.

        Lets you specify attributes like browser information  # noqa: E501

        :param additional_attributes: The additional_attributes of this AccountIdConversationsBody.  # noqa: E501
        :type: object
        """

        self._additional_attributes = additional_attributes

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this AccountIdConversationsBody.  # noqa: E501

        The object to save custom attributes for conversation, accepts custom attributes key and value  # noqa: E501

        :return: The custom_attributes of this AccountIdConversationsBody.  # noqa: E501
        :rtype: object
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this AccountIdConversationsBody.

        The object to save custom attributes for conversation, accepts custom attributes key and value  # noqa: E501

        :param custom_attributes: The custom_attributes of this AccountIdConversationsBody.  # noqa: E501
        :type: object
        """

        self._custom_attributes = custom_attributes

    @property
    def status(self):
        """Gets the status of this AccountIdConversationsBody.  # noqa: E501

        Specify the conversation whether it's pending, open, closed  # noqa: E501

        :return: The status of this AccountIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountIdConversationsBody.

        Specify the conversation whether it's pending, open, closed  # noqa: E501

        :param status: The status of this AccountIdConversationsBody.  # noqa: E501
        :type: str
        """
        allowed_values = ["open", "resolved", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def assignee_id(self):
        """Gets the assignee_id of this AccountIdConversationsBody.  # noqa: E501

        Agent Id for assigning a conversation to an agent  # noqa: E501

        :return: The assignee_id of this AccountIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._assignee_id

    @assignee_id.setter
    def assignee_id(self, assignee_id):
        """Sets the assignee_id of this AccountIdConversationsBody.

        Agent Id for assigning a conversation to an agent  # noqa: E501

        :param assignee_id: The assignee_id of this AccountIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._assignee_id = assignee_id

    @property
    def team_id(self):
        """Gets the team_id of this AccountIdConversationsBody.  # noqa: E501

        Team Id for assigning a conversation to a team  # noqa: E501

        :return: The team_id of this AccountIdConversationsBody.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this AccountIdConversationsBody.

        Team Id for assigning a conversation to a team  # noqa: E501

        :param team_id: The team_id of this AccountIdConversationsBody.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def message(self):
        """Gets the message of this AccountIdConversationsBody.  # noqa: E501


        :return: The message of this AccountIdConversationsBody.  # noqa: E501
        :rtype: Apiv1accountsaccountIdconversationsMessage
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this AccountIdConversationsBody.


        :param message: The message of this AccountIdConversationsBody.  # noqa: E501
        :type: Apiv1accountsaccountIdconversationsMessage
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountIdConversationsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountIdConversationsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
