# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PublicConversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'inbox_id': 'str',
        'messages': 'list[Message]',
        'contact': 'object'
    }

    attribute_map = {
        'id': 'id',
        'inbox_id': 'inbox_id',
        'messages': 'messages',
        'contact': 'contact'
    }

    def __init__(self, id=None, inbox_id=None, messages=None, contact=None):  # noqa: E501
        """PublicConversation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._inbox_id = None
        self._messages = None
        self._contact = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if inbox_id is not None:
            self.inbox_id = inbox_id
        if messages is not None:
            self.messages = messages
        if contact is not None:
            self.contact = contact

    @property
    def id(self):
        """Gets the id of this PublicConversation.  # noqa: E501

        Id of the conversation  # noqa: E501

        :return: The id of this PublicConversation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PublicConversation.

        Id of the conversation  # noqa: E501

        :param id: The id of this PublicConversation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inbox_id(self):
        """Gets the inbox_id of this PublicConversation.  # noqa: E501

        The inbox id of the conversation  # noqa: E501

        :return: The inbox_id of this PublicConversation.  # noqa: E501
        :rtype: str
        """
        return self._inbox_id

    @inbox_id.setter
    def inbox_id(self, inbox_id):
        """Sets the inbox_id of this PublicConversation.

        The inbox id of the conversation  # noqa: E501

        :param inbox_id: The inbox_id of this PublicConversation.  # noqa: E501
        :type: str
        """

        self._inbox_id = inbox_id

    @property
    def messages(self):
        """Gets the messages of this PublicConversation.  # noqa: E501

        Messages in the conversation  # noqa: E501

        :return: The messages of this PublicConversation.  # noqa: E501
        :rtype: list[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this PublicConversation.

        Messages in the conversation  # noqa: E501

        :param messages: The messages of this PublicConversation.  # noqa: E501
        :type: list[Message]
        """

        self._messages = messages

    @property
    def contact(self):
        """Gets the contact of this PublicConversation.  # noqa: E501

        The contact information associated to the conversation  # noqa: E501

        :return: The contact of this PublicConversation.  # noqa: E501
        :rtype: object
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this PublicConversation.

        The contact information associated to the conversation  # noqa: E501

        :param contact: The contact of this PublicConversation.  # noqa: E501
        :type: object
        """

        self._contact = contact

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PublicConversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PublicConversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
