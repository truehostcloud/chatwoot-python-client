# coding: utf-8

"""
    Chatwoot

    This is the API documentation for Chatwoot server.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: hello@chatwoot.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ContactPayloadContact(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'name': 'str',
        'phone_number': 'str',
        'thumbnail': 'str',
        'additional_attributes': 'object',
        'custom_attributes': 'object',
        'contact_inboxes': 'list[ContactInboxes]'
    }

    attribute_map = {
        'email': 'email',
        'name': 'name',
        'phone_number': 'phone_number',
        'thumbnail': 'thumbnail',
        'additional_attributes': 'additional_attributes',
        'custom_attributes': 'custom_attributes',
        'contact_inboxes': 'contact_inboxes'
    }

    def __init__(self, email=None, name=None, phone_number=None, thumbnail=None, additional_attributes=None, custom_attributes=None, contact_inboxes=None):  # noqa: E501
        """ContactPayloadContact - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._name = None
        self._phone_number = None
        self._thumbnail = None
        self._additional_attributes = None
        self._custom_attributes = None
        self._contact_inboxes = None
        self.discriminator = None
        if email is not None:
            self.email = email
        if name is not None:
            self.name = name
        if phone_number is not None:
            self.phone_number = phone_number
        if thumbnail is not None:
            self.thumbnail = thumbnail
        if additional_attributes is not None:
            self.additional_attributes = additional_attributes
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if contact_inboxes is not None:
            self.contact_inboxes = contact_inboxes

    @property
    def email(self):
        """Gets the email of this ContactPayloadContact.  # noqa: E501

        Email address of the contact  # noqa: E501

        :return: The email of this ContactPayloadContact.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactPayloadContact.

        Email address of the contact  # noqa: E501

        :param email: The email of this ContactPayloadContact.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def name(self):
        """Gets the name of this ContactPayloadContact.  # noqa: E501

        The name of the contact  # noqa: E501

        :return: The name of this ContactPayloadContact.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ContactPayloadContact.

        The name of the contact  # noqa: E501

        :param name: The name of this ContactPayloadContact.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_number(self):
        """Gets the phone_number of this ContactPayloadContact.  # noqa: E501

        Phone number of the contact  # noqa: E501

        :return: The phone_number of this ContactPayloadContact.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ContactPayloadContact.

        Phone number of the contact  # noqa: E501

        :param phone_number: The phone_number of this ContactPayloadContact.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def thumbnail(self):
        """Gets the thumbnail of this ContactPayloadContact.  # noqa: E501

        Avatar URL of the contact  # noqa: E501

        :return: The thumbnail of this ContactPayloadContact.  # noqa: E501
        :rtype: str
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this ContactPayloadContact.

        Avatar URL of the contact  # noqa: E501

        :param thumbnail: The thumbnail of this ContactPayloadContact.  # noqa: E501
        :type: str
        """

        self._thumbnail = thumbnail

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this ContactPayloadContact.  # noqa: E501

        The object containing additional attributes related to the contact  # noqa: E501

        :return: The additional_attributes of this ContactPayloadContact.  # noqa: E501
        :rtype: object
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this ContactPayloadContact.

        The object containing additional attributes related to the contact  # noqa: E501

        :param additional_attributes: The additional_attributes of this ContactPayloadContact.  # noqa: E501
        :type: object
        """

        self._additional_attributes = additional_attributes

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this ContactPayloadContact.  # noqa: E501

        The object to save custom attributes for contact, accepts custom attributes key and value  # noqa: E501

        :return: The custom_attributes of this ContactPayloadContact.  # noqa: E501
        :rtype: object
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this ContactPayloadContact.

        The object to save custom attributes for contact, accepts custom attributes key and value  # noqa: E501

        :param custom_attributes: The custom_attributes of this ContactPayloadContact.  # noqa: E501
        :type: object
        """

        self._custom_attributes = custom_attributes

    @property
    def contact_inboxes(self):
        """Gets the contact_inboxes of this ContactPayloadContact.  # noqa: E501


        :return: The contact_inboxes of this ContactPayloadContact.  # noqa: E501
        :rtype: list[ContactInboxes]
        """
        return self._contact_inboxes

    @contact_inboxes.setter
    def contact_inboxes(self, contact_inboxes):
        """Sets the contact_inboxes of this ContactPayloadContact.


        :param contact_inboxes: The contact_inboxes of this ContactPayloadContact.  # noqa: E501
        :type: list[ContactInboxes]
        """

        self._contact_inboxes = contact_inboxes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactPayloadContact, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactPayloadContact):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
